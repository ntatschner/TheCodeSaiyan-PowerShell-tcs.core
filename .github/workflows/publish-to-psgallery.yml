name: Publish to PowerShell Gallery

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v0.1.8, etc.
  workflow_dispatch:  # Allows manual triggering
    inputs:
      force_publish:
        description: 'Force publish even if version exists'
        required: false
        default: false
        type: boolean

env:
  MODULE_NAME: 'tcs.core'
  MODULE_PATH: './module/tcs.core'

jobs:
  validate:
    name: Validate Module
    runs-on: windows-latest
    outputs:
      module_version: ${{ steps.get_version.outputs.version }}
      should_publish: ${{ steps.check_version.outputs.should_publish }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup PowerShell
      shell: pwsh
      run: |
        # Ensure we have the latest PowerShellGet
        Install-Module -Name PowerShellGet -Force -AllowClobber -Scope CurrentUser
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser

    - name: Test Module Manifest
      shell: pwsh
      run: |
        Write-Host "Testing module manifest..." -ForegroundColor Green
        $manifestPath = "${{ env.MODULE_PATH }}/${{ env.MODULE_NAME }}.psd1"
        
        if (-not (Test-Path $manifestPath)) {
          throw "Module manifest not found at: $manifestPath"
        }
        
        try {
          $manifest = Test-ModuleManifest -Path $manifestPath -ErrorAction Stop
          Write-Host "✅ Module manifest is valid" -ForegroundColor Green
          Write-Host "Module: $($manifest.Name)" -ForegroundColor Cyan
          Write-Host "Version: $($manifest.Version)" -ForegroundColor Cyan
          Write-Host "Author: $($manifest.Author)" -ForegroundColor Cyan
        }
        catch {
          Write-Error "❌ Module manifest validation failed: $_"
          throw
        }

    - name: Get Module Version
      id: get_version
      shell: pwsh
      run: |
        $manifestPath = "${{ env.MODULE_PATH }}/${{ env.MODULE_NAME }}.psd1"
        $manifest = Import-PowerShellDataFile -Path $manifestPath
        $version = $manifest.ModuleVersion
        Write-Host "Module version: $version" -ForegroundColor Green
        echo "version=$version" >> $env:GITHUB_OUTPUT

    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        Write-Host "Running PSScriptAnalyzer..." -ForegroundColor Green
        $results = Invoke-ScriptAnalyzer -Path "${{ env.MODULE_PATH }}" -Recurse -Severity Warning,Error
        
        if ($results) {
          Write-Host "❌ PSScriptAnalyzer found issues:" -ForegroundColor Red
          $results | Format-Table -AutoSize
          
          # Count errors and warnings
          $errors = ($results | Where-Object Severity -eq 'Error').Count
          $warnings = ($results | Where-Object Severity -eq 'Warning').Count
          
          Write-Host "Errors: $errors, Warnings: $warnings" -ForegroundColor Yellow
          
          # Fail on errors, warn on warnings
          if ($errors -gt 0) {
            throw "PSScriptAnalyzer found $errors error(s). Please fix before publishing."
          }
        } else {
          Write-Host "✅ No PSScriptAnalyzer issues found" -ForegroundColor Green
        }

    - name: Test Module Import
      shell: pwsh
      run: |
        Write-Host "Testing module import..." -ForegroundColor Green
        try {
          Import-Module "${{ env.MODULE_PATH }}/${{ env.MODULE_NAME }}.psd1" -Force -ErrorAction Stop
          Write-Host "✅ Module imports successfully" -ForegroundColor Green
          
          # Test exported functions
          $exportedFunctions = Get-Module ${{ env.MODULE_NAME }} | Select-Object -ExpandProperty ExportedFunctions
          Write-Host "Exported functions:" -ForegroundColor Cyan
          $exportedFunctions.Keys | ForEach-Object { Write-Host "  - $_" -ForegroundColor Gray }
        }
        catch {
          Write-Error "❌ Module import failed: $_"
          throw
        }

    - name: Check if Version Exists in PowerShell Gallery
      id: check_version
      shell: pwsh
      run: |
        Write-Host "Checking if version exists in PowerShell Gallery..." -ForegroundColor Green
        $version = "${{ steps.get_version.outputs.version }}"
        $forcePublish = "${{ github.event.inputs.force_publish }}" -eq "true"
        
        try {
          $existingModule = Find-PSResource -Name "${{ env.MODULE_NAME }}" -Version $version -ErrorAction SilentlyContinue
          
          if ($existingModule -and -not $forcePublish) {
            Write-Host "❌ Version $version already exists in PowerShell Gallery" -ForegroundColor Red
            Write-Host "Use force_publish input to override" -ForegroundColor Yellow
            echo "should_publish=false" >> $env:GITHUB_OUTPUT
          } else {
            if ($existingModule -and $forcePublish) {
              Write-Host "⚠️ Version $version exists but force_publish is enabled" -ForegroundColor Yellow
            } else {
              Write-Host "✅ Version $version is new" -ForegroundColor Green
            }
            echo "should_publish=true" >> $env:GITHUB_OUTPUT
          }
        }
        catch {
          Write-Host "✅ Module not found in gallery (new module)" -ForegroundColor Green
          echo "should_publish=true" >> $env:GITHUB_OUTPUT
        }

  publish:
    name: Publish to PowerShell Gallery
    runs-on: windows-latest
    needs: validate
    if: needs.validate.outputs.should_publish == 'true'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup PowerShell
      shell: pwsh
      run: |
        Write-Host "Setting up PowerShell publishing environment..." -ForegroundColor Green
        
        # Install required modules with proper error handling
        try {
          # First try to install/update PowerShellGet (legacy)
          Install-Module -Name PowerShellGet -Force -AllowClobber -Scope CurrentUser -ErrorAction SilentlyContinue
          
          # Also install Microsoft.PowerShell.PSResourceGet (new)
          Install-Module -Name Microsoft.PowerShell.PSResourceGet -Force -AllowClobber -Scope CurrentUser -ErrorAction SilentlyContinue
        }
        catch {
          Write-Warning "Some modules failed to install: $_"
        }
        
        # Check which publishing method is available
        $hasLegacyPublish = Get-Command Publish-Module -ErrorAction SilentlyContinue
        $hasNewPublish = Get-Command Publish-PSResource -ErrorAction SilentlyContinue
        
        Write-Host "Available publishing methods:" -ForegroundColor Cyan
        Write-Host "  Publish-Module: $($hasLegacyPublish -ne $null)" -ForegroundColor Gray
        Write-Host "  Publish-PSResource: $($hasNewPublish -ne $null)" -ForegroundColor Gray

    - name: Publish to PowerShell Gallery
      shell: pwsh
      env:
        PSGALLERY_API_KEY: ${{ secrets.PSGALLERY_API_KEY }}
      run: |
        Write-Host "Publishing module to PowerShell Gallery..." -ForegroundColor Green
        
        if (-not $env:PSGALLERY_API_KEY) {
          throw "PowerShell Gallery API Key not found. Please set PSGALLERY_API_KEY secret."
        }
        
        try {
          # Try different publishing methods based on availability
          $published = $false
          
          # Method 1: Try new PSResourceGet approach
          if (Get-Command Publish-PSResource -ErrorAction SilentlyContinue) {
            Write-Host "Attempting to publish using Publish-PSResource..." -ForegroundColor Gray
            try {
              # Ensure PSGallery repository is registered
              $repo = Get-PSResourceRepository -Name PSGallery -ErrorAction SilentlyContinue
              if (-not $repo) {
                Write-Host "Registering PSGallery repository..." -ForegroundColor Gray
                Register-PSResourceRepository -PSGallery -Trusted
              }
              
              Publish-PSResource -Path "${{ env.MODULE_PATH }}" -ApiKey $env:PSGALLERY_API_KEY -Repository PSGallery -Verbose
              $published = $true
              Write-Host "✅ Published using Publish-PSResource" -ForegroundColor Green
            }
            catch {
              Write-Warning "Publish-PSResource failed: $_"
            }
          }
          
          # Method 2: Fallback to legacy PowerShellGet
          if (-not $published -and (Get-Command Publish-Module -ErrorAction SilentlyContinue)) {
            Write-Host "Attempting to publish using Publish-Module..." -ForegroundColor Gray
            try {
              # Ensure PSGallery is trusted
              Set-PSRepository -Name PSGallery -InstallationPolicy Trusted -ErrorAction SilentlyContinue
              
              Publish-Module -Path "${{ env.MODULE_PATH }}" -NuGetApiKey $env:PSGALLERY_API_KEY -Repository PSGallery -Verbose
              $published = $true
              Write-Host "✅ Published using Publish-Module" -ForegroundColor Green
            }
            catch {
              Write-Warning "Publish-Module failed: $_"
            }
          }
          
          if (-not $published) {
            throw "All publishing methods failed. No suitable publish command available."
          }
          
          Write-Host "✅ Module published successfully!" -ForegroundColor Green
          Write-Host "Module: ${{ env.MODULE_NAME }}" -ForegroundColor Cyan
          Write-Host "Version: ${{ needs.validate.outputs.module_version }}" -ForegroundColor Cyan
        }
        catch {
          Write-Error "❌ Failed to publish module: $_"
          throw
        }

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes in this Release
          
          - Published version ${{ needs.validate.outputs.module_version }} to PowerShell Gallery
          - Module: ${{ env.MODULE_NAME }}
          
          ### Installation
          ```powershell
          Install-Module -Name ${{ env.MODULE_NAME }} -Force
          ```
          
          ### Update
          ```powershell
          Update-Module -Name ${{ env.MODULE_NAME }}
          ```
        draft: false
        prerelease: false

  notify:
    name: Notify Results
    runs-on: windows-latest
    needs: [validate, publish]
    if: always()
    
    steps:
    - name: Notification
      shell: pwsh
      run: |
        # Get workflow results with proper null handling
        $validateResult = '${{ needs.validate.result }}'
        $publishResult = '${{ needs.publish.result }}'
        $shouldPublish = '${{ needs.validate.outputs.should_publish }}'
        $version = '${{ needs.validate.outputs.module_version }}'
        
        Write-Host "=== Workflow Results ===" -ForegroundColor Cyan
        
        # Safely determine colors
        $validateColor = if ($validateResult -eq 'success') { 'Green' } else { 'Red' }
        Write-Host "Validation: $validateResult" -ForegroundColor $validateColor
        
        if ($shouldPublish -eq 'true') {
          $publishColor = if ($publishResult -eq 'success') { 'Green' } else { 'Red' }
          Write-Host "Publication: $publishResult" -ForegroundColor $publishColor
          
          if ($publishResult -eq 'success') {
            Write-Host "🎉 Module ${{ env.MODULE_NAME }} v$version published successfully!" -ForegroundColor Green
          } elseif ($publishResult -eq 'failure') {
            Write-Host "❌ Publication failed" -ForegroundColor Red
          } else {
            Write-Host "⚠️ Publication status: $publishResult" -ForegroundColor Yellow
          }
        } else {
          Write-Host "Publication: Skipped (version already exists)" -ForegroundColor Yellow
        }