name: CI - Validate Module

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'module/**'
      - '.github/workflows/**'
  push:
    branches: [ main ]
    paths:
      - 'module/**'
      - '.github/workflows/**'

env:
  MODULE_NAME: 'tcs.core'
  MODULE_PATH: './module/tcs.core'

jobs:
  validate:
    name: Validate Module
    runs-on: windows-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup PowerShell
      shell: pwsh
      run: |
        Write-Host "Setting up PowerShell environment..." -ForegroundColor Green
        Install-Module -Name PowerShellGet -Force -AllowClobber -Scope CurrentUser
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser

    - name: Test Module Manifest
      shell: pwsh
      run: |
        Write-Host "Testing module manifest..." -ForegroundColor Green
        $manifestPath = "${{ env.MODULE_PATH }}/${{ env.MODULE_NAME }}.psd1"
        
        if (-not (Test-Path $manifestPath)) {
          throw "Module manifest not found at: $manifestPath"
        }
        
        try {
          $manifest = Test-ModuleManifest -Path $manifestPath -ErrorAction Stop
          Write-Host "✅ Module manifest is valid" -ForegroundColor Green
          Write-Host "Module: $($manifest.Name)" -ForegroundColor Cyan
          Write-Host "Version: $($manifest.Version)" -ForegroundColor Cyan
          Write-Host "Author: $($manifest.Author)" -ForegroundColor Cyan
          Write-Host "Description: $($manifest.Description)" -ForegroundColor Cyan
          
          # Check required fields for PowerShell Gallery
          # Note: Test-ModuleManifest returns properties with different names
          $checks = @{
            'Version' = $manifest.Version
            'Description' = $manifest.Description  
            'Author' = $manifest.Author
          }
          
          foreach ($check in $checks.GetEnumerator()) {
            if (-not $check.Value -or [string]::IsNullOrWhiteSpace($check.Value)) {
              throw "Required field '$($check.Key)' is missing or empty"
            }
          }
          Write-Host "✅ All required fields are present" -ForegroundColor Green
        }
        catch {
          Write-Error "❌ Module manifest validation failed: $_"
          throw
        }

    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        Write-Host "Running PSScriptAnalyzer..." -ForegroundColor Green
        $results = Invoke-ScriptAnalyzer -Path "${{ env.MODULE_PATH }}" -Recurse -Severity Information,Warning,Error
        
        if ($results) {
          Write-Host "PSScriptAnalyzer Results:" -ForegroundColor Yellow
          
          # Group results by severity
          $errors = $results | Where-Object Severity -eq 'Error'
          $warnings = $results | Where-Object Severity -eq 'Warning'  
          $info = $results | Where-Object Severity -eq 'Information'
          
          if ($errors) {
            Write-Host "`n❌ ERRORS ($($errors.Count)):" -ForegroundColor Red
            $errors | Format-Table ScriptName, Line, Column, RuleName, Message -Wrap
          }
          
          if ($warnings) {
            Write-Host "`n⚠️ WARNINGS ($($warnings.Count)):" -ForegroundColor Yellow
            $warnings | Format-Table ScriptName, Line, Column, RuleName, Message -Wrap
          }
          
          if ($info) {
            Write-Host "`nℹ️ INFORMATION ($($info.Count)):" -ForegroundColor Cyan
            $info | Format-Table ScriptName, Line, Column, RuleName, Message -Wrap
          }
          
          # Summary
          Write-Host "`nSummary: $($errors.Count) error(s), $($warnings.Count) warning(s), $($info.Count) info" -ForegroundColor White
          
          # Fail on errors
          if ($errors.Count -gt 0) {
            throw "PSScriptAnalyzer found $($errors.Count) error(s). Please fix before merging."
          }
        } else {
          Write-Host "✅ No PSScriptAnalyzer issues found" -ForegroundColor Green
        }

    - name: Test Module Import
      shell: pwsh
      run: |
        Write-Host "Testing module import..." -ForegroundColor Green
        try {
          # Import the module
          Import-Module "${{ env.MODULE_PATH }}/${{ env.MODULE_NAME }}.psd1" -Force -ErrorAction Stop
          Write-Host "✅ Module imports successfully" -ForegroundColor Green
          
          # Test exported functions
          $module = Get-Module ${{ env.MODULE_NAME }}
          $exportedFunctions = $module.ExportedFunctions
          
          if ($exportedFunctions.Count -eq 0) {
            Write-Warning "⚠️ No functions are exported by this module"
          } else {
            Write-Host "Exported functions ($($exportedFunctions.Count)):" -ForegroundColor Cyan
            $exportedFunctions.Keys | Sort-Object | ForEach-Object { 
              Write-Host "  - $_" -ForegroundColor Gray 
            }
          }
          
          # Test that help is available for exported functions
          Write-Host "`nTesting help documentation..." -ForegroundColor Green
          $functionsWithoutHelp = @()
          
          foreach ($functionName in $exportedFunctions.Keys) {
            $help = Get-Help $functionName -ErrorAction SilentlyContinue
            if (-not $help -or $help.Synopsis -like "*$functionName*" -and $help.Synopsis -notmatch '\w+\s+\w+') {
              $functionsWithoutHelp += $functionName
            }
          }
          
          if ($functionsWithoutHelp) {
            Write-Warning "⚠️ Functions without proper help documentation:"
            $functionsWithoutHelp | ForEach-Object { Write-Host "  - $_" -ForegroundColor Yellow }
          } else {
            Write-Host "✅ All functions have help documentation" -ForegroundColor Green
          }
        }
        catch {
          Write-Error "❌ Module import failed: $_"
          throw
        }
        finally {
          # Clean up
          Remove-Module ${{ env.MODULE_NAME }} -Force -ErrorAction SilentlyContinue
        }

    - name: Test Function Execution
      shell: pwsh
      run: |
        Write-Host "Testing basic function execution..." -ForegroundColor Green
        
        # Import the module
        Import-Module "${{ env.MODULE_PATH }}/${{ env.MODULE_NAME }}.psd1" -Force
        
        try {
          # Test ConvertTo-CamelCase function
          $result = ConvertTo-CamelCase -Value "HelloWorld"
          if ($result -eq "helloWorld") {
            Write-Host "✅ ConvertTo-CamelCase works correctly" -ForegroundColor Green
          } else {
            throw "ConvertTo-CamelCase returned unexpected result: $result"
          }
          
          # Test New-DynamicParameter function
          $dynParam = New-DynamicParameter -Name "TestParam" -ParameterType ([string]) -Mandatory
          if ($dynParam.Name -eq "TestParam" -and $dynParam.Parameter) {
            Write-Host "✅ New-DynamicParameter works correctly" -ForegroundColor Green
          } else {
            throw "New-DynamicParameter returned unexpected result"
          }
          
          Write-Host "✅ All function tests passed" -ForegroundColor Green
        }
        catch {
          Write-Error "❌ Function testing failed: $_"
          throw
        }
        finally {
          Remove-Module ${{ env.MODULE_NAME }} -Force -ErrorAction SilentlyContinue
        }

    - name: Validation Summary
      if: always()
      shell: pwsh
      run: |
        $jobStatus = '${{ job.status }}'
        Write-Host "`n=== Validation Complete ===" -ForegroundColor Cyan
        if ($jobStatus -eq 'success') {
          Write-Host "✅ All validation checks passed!" -ForegroundColor Green
          Write-Host "The module is ready for publishing." -ForegroundColor Green
        } else {
          Write-Host "❌ Some validation checks failed." -ForegroundColor Red
          Write-Host "Please review the errors above and fix them." -ForegroundColor Red
        }